["'''\n", 'Below program is to read current processing consumed by your system and mail it.\n', '\n', "'''\n", '\n', 'import subprocess\n', 'from email.mime.multipart import MIMEMultipart\n', 'from email.mime.text import MIMEText\n', 'import smtplib, ssl\n', '\n', 'class Mail: #mail class\n', '\n', '    def __init__(self):\n', '        self.port = 465\n', '        self.smtp_server_domain_name = "smtp.gmail.com"\n', '        self.sender_mail = "testtomail007@gmail.com" #from which mail id you want to send the mail\n', "        file = open('password.txt').readlines() #save your password in this file in your project\n", '        self.password = str(file[0])\n', '\n', '    def send(self, emails, subject, content):\n', "        mail = MIMEMultipart('alternative')\n", "        mail['Subject'] = subject\n", "        mail['From'] = self.sender_mail\n", "        mail['To'] = emails\n", '        text_content = MIMEText(content.format(emails.split("@")[0]), \'plain\') # this is the content policy need not have to worry abt this\n', '        mail.attach(text_content)\n', '        ssl_context = ssl.create_default_context()\n', '        service = smtplib.SMTP_SSL(self.smtp_server_domain_name, self.port, context=ssl_context)\n', '        service.login(self.sender_mail, self.password)\n', '        service.sendmail(self.sender_mail,emails,mail.as_string()) #mail is being sent here\n', '\n', '\n', "output = subprocess.check_output(['top', '-b', '-n 1']) # Explanation is given in below docstring\n", "'''\n", '-b  :Batch-mode operation\n', '    Starts top in Batch mode, which could be useful for sending output\n', '    from top to other programs or to a file.  In this mode, top will\n', "    not accept input and runs until the iterations limit you've set\n", "    with the `-n' command-line option or until killed.\n", '\n', '-n  :Number-of-iterations limit as:  -n number\n', '    Specifies the maximum number of iterations, or frames, top should\n', '    produce before ending.\n', "'''\n", 'final_output = str(output).replace("b\'",\'\').split(\'\\\\n\') # output we get will be in byte format so converting it to string and removing all the unwanted stuff\n', '\n', 'to_print = []\n', 'to_validate = []\n', '\n', '#First 3 lines are important so have read it in one list\n', 'to_print.append(final_output[0])\n', 'to_print.append(final_output[1])\n', 'to_print.append(final_output[2])\n', '\n', '# all the data other than first 3 lines are read in another list\n', 'for i in range(3,len(final_output)-1):#-1 is done here because in the end there was a extra block which i didnt need\n', '    to_validate.append(final_output[i])\n', '\n', "mail_body = '' # mail has to be in the form of string so will be concatenating all the values here\n", 'for val in to_print:\n', '    mail_body+=val\n', "    mail_body+='\\n'\n", 'for val2 in range(0,10): # to check processing consumption i need just first 10 lines so range till 10\n', '    mail_body+=to_validate[val2]\n', "    mail_body+='\\n'\n", '\n', 'print(mail_body)\n', '\n', '\n', '\n', "mails = 'vishwanathsavai@gmail.com'\n", "subject = 'Unix Health Check'\n", 'content = str(mail_body)\n', '\n', 'mail = Mail()\n', 'mail.send(mails, subject, content) # calling method send from object created from Mail class\n']